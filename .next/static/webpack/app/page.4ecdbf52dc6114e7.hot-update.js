"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/blob-simulation/blob.ts":
/*!********************************************!*\
  !*** ./components/blob-simulation/blob.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./particle */ \"(app-pages-browser)/./components/blob-simulation/particle.ts\");\n/* harmony import */ var _spring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spring */ \"(app-pages-browser)/./components/blob-simulation/spring.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./components/blob-simulation/utils.ts\");\n\n\n\n // Import the isPointInLetter function\n// Temporary vector for calculations\nconst tempVec = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();\n// Blob Class - represents a complete blob with particles and springs\nclass Blob {\n    setup() {\n        this.particles.length = 0;\n        this.springs.length = 0;\n        const safeRadius = this.maxRadius; // Already ensured > 0 in constructor\n        const angleStep = Math.PI * 2 / this.edgePointCount;\n        // Ensure initialSpringLength is positive and reasonable\n        const initialSpringLength = Math.max(1e-6, safeRadius * Math.sin(Math.PI / this.edgePointCount) * 2);\n        for(let i = 0; i < this.edgePointCount; i++){\n            const angle = i * angleStep;\n            const x = Math.cos(angle) * safeRadius + this.centre.x;\n            const y = Math.sin(angle) * safeRadius + this.centre.y;\n            this.particles.push(new _particle__WEBPACK_IMPORTED_MODULE_0__.Particle(x, y));\n            if (i > 0) {\n                this.springs.push(new _spring__WEBPACK_IMPORTED_MODULE_1__.Spring(this.particles[i], this.particles[i - 1], initialSpringLength));\n            }\n        }\n        this.springs.push(new _spring__WEBPACK_IMPORTED_MODULE_1__.Spring(this.particles[0], this.particles[this.edgePointCount - 1], initialSpringLength));\n    }\n    updateCentre() {\n        if (this.particles.length === 0) return;\n        this.centre.set(0, 0);\n        this.particles.forEach((p)=>this.centre.add(p.pos));\n        this.centre.divideScalar(this.particles.length);\n    }\n    updateMaxRadius() {\n        if (this.particles.length === 0) {\n            this.maxRadius = 0;\n            return;\n        }\n        let maxDistSq = 0;\n        this.particles.forEach((particle)=>{\n            const distSq = this.centre.distanceToSquared(particle.pos);\n            if (distSq > maxDistSq) maxDistSq = distSq;\n        });\n        this.maxRadius = Math.sqrt(maxDistSq);\n    }\n    // Repel other blobs\n    repelBlobs(blobs, interactionStrength) {\n        blobs.forEach((blobB)=>{\n            if (this.id === blobB.id) return;\n            // Use the same repelDistance for both blobs to ensure consistency\n            const effectiveRepelDistance = Math.max(this.repelDistance, blobB.repelDistance);\n            const distBetweenCentersSq = this.centre.distanceToSquared(blobB.centre);\n            // Use radii squared for comparison to avoid sqrt\n            const combinedRadii = this.maxRadius + blobB.maxRadius;\n            const interactionRangeSq = Math.pow(combinedRadii + effectiveRepelDistance, 2);\n            // Optimization: Broad phase check based on centers and radii + repel distance\n            if (distBetweenCentersSq > interactionRangeSq) return;\n            // Narrow phase: Check particle pairs\n            this.particles.forEach((particleA)=>{\n                blobB.particles.forEach((particleB)=>{\n                    tempVec.copy(particleA.pos).sub(particleB.pos);\n                    const distSq = tempVec.lengthSq(); // Use squared distance\n                    // Apply repulsion force if within repelDistance squared\n                    const repelDistSq = effectiveRepelDistance * effectiveRepelDistance;\n                    if (distSq > 1e-12 && distSq < repelDistSq) {\n                        const dist = Math.sqrt(distSq);\n                        const overlap = effectiveRepelDistance - dist;\n                        // Calculate force magnitude based on overlap and strength\n                        let forceMagnitude = overlap * interactionStrength;\n                        // Cap the force magnitude\n                        forceMagnitude = Math.min(forceMagnitude, this.maxRepulsionForce);\n                        // Normalize direction vector (reuse tempVec) and apply magnitude\n                        tempVec.multiplyScalar(forceMagnitude / dist);\n                        // Apply forces ensuring they are finite\n                        particleA.applyForce(tempVec);\n                        particleB.applyForce(tempVec.multiplyScalar(-1)); // Apply opposite force\n                    }\n                });\n            });\n        });\n    }\n    get area() {\n        let total = 0;\n        if (this.particles.length < 3) return 0;\n        for(let i = 0; i < this.edgePointCount; i++){\n            const p1 = this.particles[i].pos;\n            const p2 = this.particles[(i + 1) % this.edgePointCount].pos;\n            total += p1.x * p2.y - p2.x * p1.y;\n        }\n        return Math.abs(total / 2);\n    }\n    grow(maxExpansionFactor) {\n        if (this.initialArea <= 0) return;\n        const maxTargetArea = this.initialArea * Math.max(1, maxExpansionFactor);\n        if (this.targetArea < maxTargetArea) {\n            this.targetArea *= 1.005; // Slow growth\n            this.targetArea = Math.min(this.targetArea, maxTargetArea); // Clamp to max\n        } else if (this.targetArea > maxTargetArea) {\n            this.targetArea = maxTargetArea;\n        }\n    }\n    maintainPressure() {\n        const currentArea = this.area;\n        if (currentArea < 1e-6 || this.targetArea < 1e-6) return;\n        // Make pressure force proportional to the difference ratio, but prevent extreme forces\n        const areaRatio = this.targetArea / currentArea;\n        // Clamp the ratio to prevent excessive forces when area is very small\n        const clampedRatio = Math.max(0.5, Math.min(areaRatio, 2.0));\n        const pressureDifference = clampedRatio - 1;\n        const forceSize = pressureDifference * this.pressureConstant;\n        // Limit the maximum force size to prevent instability\n        const maxPressureForce = 0.1; // Example cap\n        const cappedForceSize = Math.max(-maxPressureForce, Math.min(forceSize, maxPressureForce));\n        this.particles.forEach((particle, i)=>{\n            const prev = this.particles[(i + this.edgePointCount - 1) % this.edgePointCount];\n            const next = this.particles[(i + 1) % this.edgePointCount];\n            // Calculate edge vectors from the particle to its neighbors\n            const toPrev = tempVec.copy(prev.pos).sub(particle.pos);\n            const toNext = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2().copy(next.pos).sub(particle.pos); // Use a separate Vector2 instance\n            // Calculate outward normal using the cross product concept (for 2D)\n            const edgeVector = toNext.sub(toPrev); // Vector along the edge (next - prev)\n            const outwardNormal = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(-edgeVector.y, edgeVector.x); // Perpendicular vector\n            if (outwardNormal.lengthSq() < 1e-12) return; // Skip if normal is zero length\n            outwardNormal.normalize();\n            outwardNormal.multiplyScalar(cappedForceSize);\n            particle.applyForce(outwardNormal);\n        });\n    }\n    // Collision with Static Obstacles\n    collideWithStaticShape(ctx, shapeType, shapeParams) {\n        console.log(\"collideWithStaticShape called\");\n        if (!shapeType || !shapeParams || !shapeParams.letter) return;\n        // For letter shapes\n        if (shapeType === 'letter' && shapeParams.letter) {\n            const letterCenterX = shapeParams.x + shapeParams.size / 2;\n            const letterCenterY = shapeParams.y + shapeParams.size / 2;\n            // Cache letter bounds for optimization\n            const letterBounds = {\n                minX: shapeParams.x,\n                minY: shapeParams.y,\n                maxX: shapeParams.x + shapeParams.size,\n                maxY: shapeParams.y + shapeParams.size\n            };\n            // Check ALL particles for collision with the letter shape\n            for(let i = 0; i < this.particles.length; i++){\n                const particle = this.particles[i];\n                // Quick bounds check first (simple optimization)\n                if (particle.pos.x >= letterBounds.minX - 5 && particle.pos.x <= letterBounds.maxX + 5 && particle.pos.y >= letterBounds.minY - 5 && particle.pos.y <= letterBounds.maxY + 5) {\n                    // Test if particle is actually inside the letter shape\n                    const isInside = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPointInLetter)(ctx, shapeParams.letter, letterCenterX, letterCenterY, shapeParams.size, particle.pos.x, particle.pos.y);\n                    if (isInside) {\n                        // Calculate vector from center of letter to particle\n                        const toParticle = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(particle.pos.x - letterCenterX, particle.pos.y - letterCenterY);\n                        // If vector is near zero, use a random direction\n                        if (toParticle.lengthSq() < 0.1) {\n                            const randomAngle = Math.random() * Math.PI * 2;\n                            toParticle.set(Math.cos(randomAngle), Math.sin(randomAngle));\n                        }\n                        // Normalize \n                        toParticle.normalize();\n                        // Check if the particle is within an enclosed space\n                        const isEnclosed = (()=>{\n                            const rayCount = 32;\n                            const rayLength = shapeParams.size * 0.75;\n                            let intersectionCount = 0;\n                            for(let i = 0; i < rayCount; i++){\n                                const angle = i / rayCount * Math.PI * 2;\n                                const rayX = particle.pos.x + Math.cos(angle) * rayLength;\n                                const rayY = particle.pos.y + Math.sin(angle) * rayLength;\n                                if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPointInLetter)(ctx, shapeParams.letter, letterCenterX, letterCenterY, shapeParams.size, rayX, rayY)) {\n                                    intersectionCount++;\n                                }\n                            }\n                            return intersectionCount / rayCount >= 0.75;\n                        })();\n                        // Modify repulsion direction if within an enclosed space\n                        if (isEnclosed) {\n                            // Invert the direction to guide the particle inwards\n                            toParticle.multiplyScalar(-1);\n                            // Use a strong push force\n                            const pushForce = 5.0;\n                            toParticle.multiplyScalar(pushForce);\n                            // Apply this strong force to immediately push the particle \n                            particle.applyForce(toParticle);\n                            // Also directly modify velocity to ensure immediate response\n                            const escapeVelocity = toParticle.clone().multiplyScalar(0.5);\n                            particle.vel.add(escapeVelocity);\n                            // Apply strong damping to other directions to prevent oscillation\n                            const dampingFactor = 0.5;\n                            particle.vel.multiplyScalar(dampingFactor);\n                        }\n                    } else {\n                        // Not inside, reset stuck counter if it exists\n                        if (particle.stuckFrames !== undefined) {\n                            particle.stuckFrames = 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    draw(ctx, fillColor, strokeColor, staticShapeType, staticShapeParams) {\n        var _this_particles_;\n        if (this.particles.length < 2) return;\n        ctx.beginPath();\n        // Ensure first particle exists before moving to it\n        if (!((_this_particles_ = this.particles[0]) === null || _this_particles_ === void 0 ? void 0 : _this_particles_.pos)) {\n            console.warn(\"First particle missing in draw\");\n            return;\n        }\n        ctx.moveTo(this.particles[0].pos.x, this.particles[0].pos.y);\n        for(let i = 1; i <= this.edgePointCount; i++){\n            var _this_particles_currentIndex;\n            const currentIndex = i % this.edgePointCount;\n            if ((_this_particles_currentIndex = this.particles[currentIndex]) === null || _this_particles_currentIndex === void 0 ? void 0 : _this_particles_currentIndex.pos) {\n                ctx.lineTo(this.particles[currentIndex].pos.x, this.particles[currentIndex].pos.y);\n            } else {\n                console.warn(\"Particle or position undefined at index \".concat(currentIndex, \" during draw\"));\n                ctx.closePath();\n                break;\n            }\n        }\n        ctx.closePath(); // Close path after loop\n        // Check context state before filling/stroking\n        if (ctx.fillStyle !== fillColor) ctx.fillStyle = fillColor;\n        if (ctx.strokeStyle !== strokeColor) ctx.strokeStyle = strokeColor;\n        ctx.lineWidth = 1;\n        ctx.fill();\n        ctx.stroke();\n    }\n    // Get SVG path data for this blob\n    getSVGPath() {\n        if (this.particles.length < 2) return \"\";\n        let path = \"M \".concat(this.particles[0].pos.x.toFixed(2), \" \").concat(this.particles[0].pos.y.toFixed(2));\n        for(let i = 1; i <= this.edgePointCount; i++){\n            const particle = this.particles[i % this.edgePointCount];\n            if (particle === null || particle === void 0 ? void 0 : particle.pos) {\n                path += \" L \".concat(particle.pos.x.toFixed(2), \" \").concat(particle.pos.y.toFixed(2));\n            } else {\n                console.warn(\"Particle or position undefined at index \".concat(i % this.edgePointCount, \" during SVG path generation\"));\n                return path + \" Z\";\n            }\n        }\n        path += \" Z\";\n        return path;\n    }\n    update(blobs, springTension, canvasWidth, canvasHeight, margin, isRoundedContainer, interactionStrength, maxExpansionFactor, gravity, damping, staticShapeType, staticShapeParams, ctx) {\n        // --- Force Application Phase ---\n        // Apply internal forces first (pressure, springs)\n        this.maintainPressure();\n        this.springs.forEach((spring)=>spring.update(springTension));\n        // Apply external forces (gravity, inter-blob repulsion, static collision)\n        this.particles.forEach((particle)=>{\n            particle.applyForce(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(0, gravity * 0.1)); // Apply gravity per particle\n        });\n        this.repelBlobs(blobs, interactionStrength);\n        if (ctx && staticShapeType && staticShapeParams) {\n            this.collideWithStaticShape(ctx, staticShapeType, staticShapeParams);\n        }\n        // --- [DEBUG] Draw rays for enclosed space check ---\n        if (ctx && staticShapeType === 'letter' && staticShapeParams && staticShapeParams.letter) {\n            const letterCenterX = staticShapeParams.x + staticShapeParams.size / 2;\n            const letterCenterY = staticShapeParams.y + staticShapeParams.size / 2;\n            const { size, letter } = staticShapeParams;\n            const rayCount = 16;\n            const rayLength = size * 0.5;\n            for(let i = 0; i < rayCount; i++){\n                const angle = i / rayCount * Math.PI * 2;\n                const rayX = this.centre.x + Math.cos(angle) * rayLength;\n                const rayY = this.centre.y + Math.sin(angle) * rayLength;\n                ctx.beginPath();\n                ctx.moveTo(this.centre.x, this.centre.y);\n                ctx.lineTo(rayX, rayY);\n                ctx.strokeStyle = 'red';\n                ctx.lineWidth = 0.5;\n                ctx.stroke();\n            }\n        }\n        // --- [DEBUG] End draw rays for enclosed space check ---\n        // --- Update Phase ---\n        // Update particles using applied forces and damping\n        this.particles.forEach((particle)=>{\n            particle.update(canvasWidth, canvasHeight, margin, isRoundedContainer, damping);\n        });\n        // Update blob state based on new particle positions\n        this.updateCentre();\n        this.updateMaxRadius();\n        // Apply growth after updates\n        this.grow(maxExpansionFactor);\n    }\n    constructor(x, y, edgePointCount, startSize, repelDistance){\n        this.pressureConstant = 0.08 // Pressure constant\n        ;\n        this.maxRepulsionForce = 0.5 // Cap for repulsion force magnitude\n        ;\n        this.id = Math.random();\n        this.centre = new three__WEBPACK_IMPORTED_MODULE_3__.Vector2(x, y);\n        this.edgePointCount = edgePointCount;\n        this.particles = [];\n        this.springs = [];\n        this.maxRadius = Math.max(1, startSize); // Ensure startSize is at least 1\n        this.initialArea = Math.PI * this.maxRadius * this.maxRadius;\n        this.targetArea = this.initialArea;\n        this.repelDistance = repelDistance;\n        this.setup();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/blob-simulation/blob.ts\n"));

/***/ })

});